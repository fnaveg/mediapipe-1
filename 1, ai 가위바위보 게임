import cv2
import mediapipe as mp
import numpy as np
import time
from tkinter import *
import random


mp_hands = mp.solutions.hands
# 그리기 툴 로드
mp_drawing = mp.solutions.drawing_utils
# 최대 인식할 손의 수
max_num_hands = 2
# 인식할 수 있는 제스처 번호, 제스처
gesture = {
    0:'fist', 1:'one', 2:'two', 3:'three', 4:'four', 5:'five',
    6:'six', 7:'rock', 8:'spiderman', 9:'yeah', 10:'ok',
}
# 사용할 제스처 선택
rps_gesture = {0:'rock', 5:'paper', 9:'scissors'}
rps_gesture2 = ['Tie', 'You wins', 'com wins']

# 랜드마크 감지를 위한 함수
hands = mp_hands.Hands(
    max_num_hands=max_num_hands,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5)
# Gesture recognition model 제스처 인식 모델
# 손가락 각도들, 라벨이 저장된 파일(110개)
file = np.genfromtxt('gesture_train.csv', delimiter=',')
angle = file[:,:-1].astype(np.float32)
label = file[:, -1].astype(np.float32)
# K-Nearest Neighbors K-최근접 알고리즘
knn = cv2.ml.KNearest_create()
# 학습
knn.train(angle, cv2.ml.ROW_SAMPLE, label)

text=''
com=''
cs=int(0)
ts=int(0)
ys=int(0)

def rando(you):
    global rps_result, text, com, cs, ts, ys
    
    data = [ 'rock', 'scissors', 'paper' ]
    com = random.choice(data)
    if you:
                winner = None
                text = ''
                if you=='rock':
                    if com=='rock'     : text = 'Tie' ; ts +=int(1)
                    elif com=='paper'  : text = 'com wins'  ; winner = 1; cs+=int(1)
                    elif com=='scissors': text = 'You wins'   ; winner = 0; ys +=int(1)
                elif you=='paper':
                    if com=='rock'     : text = 'You wins'  ; winner = 0; ys+=int(1)
                    elif com=='paper'  : text = 'Tie' ; ts+=int(1)
                    elif com=='scissors': text = 'com wins'; winner = 1; cs+=int(1)
                elif you=='scissors':
                    if com=='rock'     : text = 'com wins'   ; winner = 1; cs+=int(1)
                    elif com=='paper'  : text = 'You wins'; winner = 0; ys+=int(1)
                    elif com=='scissors': text = 'Tie'; ts+=int(1)
                elif len(rps_result)==0:
                    text= 'None'
                

# 웹캠 설정
cap = cv2.VideoCapture(0)
#num= cv2.resize(cap, (1920, 1280))
success, image = cap.read()

# 웹캠에 성공적으로 액세스할 때까지 반복
global rps_result
while cap.isOpened():
    success, image = cap.read()    
    
    if not success:
        print("Ignoring empty camera frame.")
        continue
    
    if cv2.waitKey(1) == ord(' '):
        num()
    
    # MediaPipe Hands 처리 전 BGR을 RGB로 변경, 좌우반전(셀카뷰)
    image = cv2.cvtColor(cv2.flip(image, 1), cv2.COLOR_BGR2RGB)
    results = hands.process(image)
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    rps_result = []
   
   
    cv2.putText(image, text = text, org=(100, 400), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(0, 0, 255), thickness=3)
    cv2.putText(image, text = com, org=(100, 100), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(0, 0, 255), thickness=3)
    cv2.putText(image, text = "com Score : %d" % cs, org=(350, 100), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(0, 0, 255), thickness=3)
    cv2.putText(image, text = "Tie Score : %d" % ts, org=(350, 150), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(0, 0, 255), thickness=3)
    cv2.putText(image, text ="You are Score : %d" % ys, org=(350, 200), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(0, 0, 255), thickness=3)
    cv2.putText(image, text ="press 'q' your keyboard", org=(100, 60), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(200, 0, 255), thickness=3)

    if results.multi_hand_landmarks is not None:
        # 가위바위보 결과, 손의 좌표 저장
     

        for hand_landmarks in results.multi_hand_landmarks:
            joint = np.zeros((21, 3)) # 빨간점 x,y,z
            for j, lm in enumerate(hand_landmarks.landmark): # joint 21개 xyz좌표
                joint[j] = [lm.x, lm.y, lm.z] # x y z 좌표

            # joint간의 각도 비교
            v1 = joint[[0,1,2,3,0,5,6,7,0,9,10,11,0,13,14,15,0,17,18,19],:] # Parent joint
            v2 = joint[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],:] # Child joint
            v = v2 - v1 # [20,3] 관절에 관한 벡터
            
            # Normalize v 길이로 나눠서 unit벡터 기본 크기가 1인 벡터
            v = v / np.linalg.norm(v, axis=1)[:, np.newaxis]

            # 벡터a*벡터b=|벡터a|*|벡터b|*cos(두 벡터가 이루는 값) 위에서 벡터크기를 1로 만들었으므로 arccos에 대입하면 각을 구할수 있음
            # angle에 각도 저장(라디안)
            angle = np.arccos(np.einsum('nt,nt->n',
                v[[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18],:], 
                v[[1,2,3,5,6,7,9,10,11,13,14,15,17,18,19],:])) # [15,]

            # 라디안-> 디그리
            angle = np.degrees(angle) 

            # k가3일때 knn을 사용해 값을 구함
            data = np.array([angle], dtype=np.float32)
            ret, r, neighbours, dist = knn.findNearest(data, 3)
            #print(ret, r ,neighbours, dist)
            idx = int(r[0][0])

            # 결과 표시
            if idx in rps_gesture.keys():
                org = (int(hand_landmarks.landmark[0].x * image.shape[1]), int(hand_landmarks.landmark[0].y * image.shape[0]))
                #cv2.putText(image, text=rps_gesture[idx].upper(), org=(org[0], org[1] + 20), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(255, 255, 255), thickness=2)

                rps_result.append({
                    'rps': rps_gesture[idx], # 가위 / 바위 / 보
                    'org': org # 두개 손의 위치
                })

            # 손 위에 랜드마크 그림
            mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)
    data2=['dataupdate', 'startend', 'prize', 'prize', 'loldata']
    data2_random = random.choice(data2)
    r=['paper', 'rock']
    p=['paper','scissors']
    s=['scissors', 'rock']
    if cv2.waitKey(1) == ord('q'):
        if data2_random == 'prize':
            if rps_result :  #q 갑이 있을 경우 rando 함수 호출
                re = rando(rps_result[0]['rps'])
        else:
            if ret == 0:
                com= random.choice(r)
                if com == 'paper':
                    text= 'com win'
                    cs+=int(1)
                else:
                    text= 'Tie'
                    ts+=int(1)
            if ret == 5:
                com = random.choice(p)
                if com == 'scissors':
                    text = 'com win'
                    cs+=int(1)
                else:
                    text= 'Tie'
                    ts+=int(1)
            if ret == 9:
                com = random.choice(s)
                if com == 'rock':
                    text = 'com win'
                    cs+=int(1)
                else:
                    text= 'Tie'
                    ts+=int(1)
    if cv2.waitKey(1) == ord('r'):
        cs=int(0)
        ts=int(0)
        ys=int(0)
    cv2.imshow('Game', image)
    if cv2.waitKey(5) & 0xFF == 27:
        break


w.mainloop()
    

cap.release()
cv2.destroyAllWindows()
